// Code generated by MockGen. DO NOT EDIT.
// Source: ./domain/repository/trashcan_repository.go
//
// Generated by this command:
//
//	mockgen -source ./domain/repository/trashcan_repository.go -destination ./usecase/trashcan/mock/mock_trashcan_repo.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	trashcan "gomibakokun_backend/domain/trashcan"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTrashcanRepository is a mock of TrashcanRepository interface.
type MockTrashcanRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTrashcanRepositoryMockRecorder
	isgomock struct{}
}

// MockTrashcanRepositoryMockRecorder is the mock recorder for MockTrashcanRepository.
type MockTrashcanRepositoryMockRecorder struct {
	mock *MockTrashcanRepository
}

// NewMockTrashcanRepository creates a new mock instance.
func NewMockTrashcanRepository(ctrl *gomock.Controller) *MockTrashcanRepository {
	mock := &MockTrashcanRepository{ctrl: ctrl}
	mock.recorder = &MockTrashcanRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrashcanRepository) EXPECT() *MockTrashcanRepositoryMockRecorder {
	return m.recorder
}

// CreateTrashcan mocks base method.
func (m *MockTrashcanRepository) CreateTrashcan(ctx context.Context, trashcan *trashcan.Trashcan) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTrashcan", ctx, trashcan)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTrashcan indicates an expected call of CreateTrashcan.
func (mr *MockTrashcanRepositoryMockRecorder) CreateTrashcan(ctx, trashcan any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTrashcan", reflect.TypeOf((*MockTrashcanRepository)(nil).CreateTrashcan), ctx, trashcan)
}

// DeleteTrashcan mocks base method.
func (m *MockTrashcanRepository) DeleteTrashcan(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTrashcan", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTrashcan indicates an expected call of DeleteTrashcan.
func (mr *MockTrashcanRepositoryMockRecorder) DeleteTrashcan(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTrashcan", reflect.TypeOf((*MockTrashcanRepository)(nil).DeleteTrashcan), ctx, id)
}

// GetAllTrashcan mocks base method.
func (m *MockTrashcanRepository) GetAllTrashcan(ctx context.Context) ([]*trashcan.Trashcan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTrashcan", ctx)
	ret0, _ := ret[0].([]*trashcan.Trashcan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTrashcan indicates an expected call of GetAllTrashcan.
func (mr *MockTrashcanRepositoryMockRecorder) GetAllTrashcan(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTrashcan", reflect.TypeOf((*MockTrashcanRepository)(nil).GetAllTrashcan), ctx)
}
